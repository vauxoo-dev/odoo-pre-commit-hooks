import inspect

from collections import defaultdict


class BaseChecker:
    """Implements functionality common to all checkers. It is recommended that all checkers inherit this class."""
    def __init__(self, enable=None, disable=None, list_messages=False):
        if disable is None:
            disable = set()
        if enable is None:
            enable = set()

        self.checks_errors = defaultdict(list)
        self.enable = enable
        self.disable = disable

        if list_messages:
            self.print_checks()

    def _get_all_checks(self):
        """Return all methods whose name starts with 'check'."""
        checks = inspect.getmembers(
            self, predicate=lambda member: inspect.ismethod(member) and member.__name__.startswith("check")
        )

        return {check[1] for check in checks}

    def _get_active_checks(self):
        """Return all active checks (methods) based on the current enabled and disabled checks."""
        return {check for check in self._get_all_checks() if self._is_check_enabled(check)}

    @staticmethod
    def get_check_messages(check):
        return getattr(check, "checks", set())

    def _is_check_enabled(self, check):
        """Whether a check or not is enabled, based on the disabled and enabled checks.

        Checks MUST NOT be confused with messages. Checks are python methods which can generate multiple types of
        messages. For example, a check can generate both 'csv-syntax-error' and 'csv-duplicate-record-id' and even
        if 'csv-duplicate-record-id' is disabled, the check will still need to run since it also generates
        'csv-syntax-error' messages.

        Messages generated by checks are gathered from the @utils.only_required_for_checks() decorator.
        """
        check_messages = self.get_check_messages(check)
        if self.disable:
            return check_messages.issubset(self.disable)
        elif self.enable:
            return bool(check_messages & self.enable)

        return True

    def get_all_messages(self):
        """Set of all messages this checker has the ability to create. Note: Having the ability does not mean messages
        will be generated, since they can be disabled/not enabled."""
        messages = set()
        for check in self._get_all_checks():
            messages.update(self.get_check_messages(check))

        return messages

    def get_active_messages(self):
        """Set of messages the checker could create. This equates to all messages currently enabled."""
        messages = set()
        for check in self._get_active_checks():
            messages.update(self.get_check_messages(check))

        return messages

    def print_checks(self):
        """Informative output stating which checks are currently enabled."""
        print("-" * 10 + f"\n${self.__class__.__name__}\n" + "-" * 10)
        for check in self._get_active_checks():
            print(f":${check.__name__}: ${check.__doc__}")
